<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="egovframework.kss.main.mapper.CourseMapper">
	<select id="selectCourseList"
		resultType="egovframework.kss.main.vo.CourseVO">
		SELECT
		c.id,
		c.title,
		c.description,
		u.name AS instructor,
		c.created_at AS created_at,
		c.status,
		COUNT(e.user_id) AS studentCount
		FROM
		course c
		INNER JOIN
		users u ON u.id = c.instructor_id
		LEFT JOIN
		enrollments e ON e.course_id = c.id
		GROUP BY
		c.id, u.name, c.title, c.description, c.created_at, c.status
		ORDER BY
		c.id;
	</select>

	<select id="selectMyCourseList"
		parameterType="java.lang.Integer"
		resultType="egovframework.kss.main.vo.CourseVO">
		select c.id, c.title, c.description, u.name as instructor,
		c.created_at as
		created_at, c.status, c.image_path
		from course c
		inner join users u on
		u.id=c.instructor_id
		inner join enrollments e ON e.course_id = c.id AND
		e.user_id = #{currentUserId}
		order by c.id
	</select>

	<select id="selectCourseById" parameterType="java.lang.Integer"
		resultType="egovframework.kss.main.vo.CourseVO">
		select c.id, c.title, c.description, u.name as instructor,
		c.created_at as created_at, c.status, u.id as instructor_id
		from course c
		inner join users u on u.id=c.instructor_id
		where c.id=#{id}
	</select>



	<select id="selectCourseEnrollList"
        parameterType="java.lang.Integer"
        resultType="egovframework.kss.main.dto.CourseEnrollListDTO">
    SELECT
        c.id,
        c.title,
        c.description,
        u.name AS instructor,
        u.image_path as instructor_image,
        c.created_at AS created_at,
        c.status,
        CASE 
            WHEN #{currentUserId} IS NULL THEN false 
            WHEN COUNT(e.user_id) > 0 THEN true 
            ELSE false 
        END AS enrolled,
        COUNT(e2.user_id) AS studentCount
    FROM
        course c
    INNER JOIN 
        users u ON u.id = c.instructor_id
    LEFT JOIN 
        enrollments e ON e.course_id = c.id AND e.user_id = #{currentUserId}
    LEFT JOIN 
        enrollments e2 ON e2.course_id = c.id
    GROUP BY 
        c.id, u.name, u.image_path, c.title, c.description, c.created_at, c.status
    ORDER BY 
        c.id;
</select>


	<insert id="registerCourse"
		parameterType="egovframework.kss.main.vo.CourseVO"
		useGeneratedKeys="true" 
        keyProperty="id"
		>
		insert into course(instructor_id, title, description,
		status, created_at, image_path)
		values (#{instructor_id},#{title}, #{description},
		#{status},
		#{created_at}, #{image_path})

	</insert>

	<insert id="enrollUserInCourse"
		parameterType="egovframework.kss.main.vo.EnrollmentVO">
		insert into enrollments(user_id, course_id, enrolled_at,
		status) values
		(#{user_id}, #{course_id}, #{enrolled_at}, #{status})
	</insert>
	
	<insert id="registerTest" parameterType="egovframework.kss.main.vo.TestVO">
		insert into test(course_id, name, start_time, end_time, time_limit, description, status) 
		values (#{course_id}, #{name}, #{start_time}, #{end_time}, #{time_limit}, #{description}, #{status})
	</insert>
	
	<select id="selectTestById" parameterType="int" resultType="egovframework.kss.main.vo.TestVO">
		select * from test where id=#{testId}
	
	</select>
	
	<select id="selectTestInCourse" parameterType="java.lang.Integer"
		resultType="egovframework.kss.main.vo.TestVO">
		select t.id, t.course_id, t.name, t.start_time, t.end_time, t.time_limit, t.shutdown, t.description, t.status, t.is_scored, (SELECT COUNT(e2.user_id) FROM exam_participation e2 WHERE e2.test_id = t.id and e2.end_time is not null) AS user_count 
		 FROM (SELECT * FROM test WHERE course_id = #{courseId}) t
		 order by t.id
	</select>
	
	<select id="selectTestInCourseWithUser" parameterType="map" resultType="egovframework.kss.main.vo.TestVO">
		SELECT 
        t.id, 
        t.course_id, 
        t.name, 
        t.start_time, 
        t.end_time, 
        t.time_limit, 
        t.shutdown, 
        t.description, 
        t.status, 
        e.status AS user_status,
        t.score,
        t.is_scored,
        (SELECT COUNT(e2.user_id) FROM exam_participation e2 WHERE e2.test_id = t.id and e2.end_time is not null) AS user_count,
        e.score as user_score
    FROM 
        (SELECT * FROM test WHERE course_id = #{courseId}) t
    LEFT JOIN 
        exam_participation e ON t.id = e.test_id AND e.user_id = #{userId}
  	order by t.id
	</select>
	
	<delete id="deleteTest" parameterType="java.lang.Integer">
		delete from test where id=#{testId}
	</delete>
	
	<update id="completeTest" parameterType="int">
		update test 
		set status = '완료', score = (SELECT SUM(score) FROM questions WHERE test_id = #{testId}) 
		where id=#{testId}
	</update>
	
	<select id="selectTotalStudentsByCourseId" parameterType="int" resultType="int">
		select count(*) from enrollments where course_id = #{courseId} and status = 'user'
	</select>
	
	<select id="selectCourseScores"
            parameterType="int"
            resultType="egovframework.kss.main.dto.CourseScoreDTO">
        SELECT 
            c.title AS course_title,
            COALESCE(SUM(CASE WHEN ep.user_id = #{currentUserId} THEN ep.score END), 0) AS user_total_score,
            COALESCE(SUM(ep.score) / NULLIF(COUNT(DISTINCT ep.user_id), 0), 0) AS average_score
        FROM 
            course c
        INNER JOIN 
            enrollments e ON e.course_id = c.id
        LEFT JOIN 
            exam_participation ep ON ep.test_id IN (
                SELECT t.id 
                FROM test t 
                WHERE t.course_id = c.id
            )
        WHERE 
            e.user_id = #{currentUserId}
        GROUP BY 
            c.title
        ORDER BY 
            c.title;
    </select>
    
    <select id="selectCourseUserCounts" parameterType="int" resultType="egovframework.kss.main.dto.CourseUserCountDTO">
    	SELECT 
    c.id AS course_id,
    c.title AS course_name,
    COUNT(e.user_id) AS total_users
FROM 
    course c
LEFT JOIN 
    enrollments e ON c.id = e.course_id
WHERE 
    c.id IN (
        SELECT course_id 
        FROM enrollments 
        WHERE user_id = #{currentUserId}
    )
GROUP BY 
    c.id, c.title;
    </select>
	
</mapper>